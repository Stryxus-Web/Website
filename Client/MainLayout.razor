@inherits LayoutComponentBase

<div id="mobile-open-button">
    <i class="bi bi-caret-right-fill"></i>
</div>
<div class="site-container header container-fluid">
    <div class="row justify-content-center">
        <div class="col-auto">
            <div id="avatar-img-container" class="@(UI.CurrentPageContext?.RelativeLink == "/" ? " active" : string.Empty) @(UI.PageIsTransitioning ? "disabled" : string.Empty)">
                <img src="@(AC.Asset("/img/avatar.avif"))" @onclick="NavigateToHome" />
            </div>
        </div>
    </div>
</div>
<NavigationBar>
    @if (UI.PageContexts is not null)
    {
        @foreach (UIState.PageContext c in UI.PageContexts.GetRange(1, UI.PageContexts.Count - 1))
        {
            <NavigationBarButton Title="@c.Name" RelativeLink="@c.RelativeLink" IconName="@c.IconName" />
        }
    }
</NavigationBar>
<main id="main-body" class="container-fluid">
    @Body
</main>
<div id="page-transitioner">
    <LoadingCircle />
</div>
<div id="main-border"></div>
<div class="site-container footer container-fluid">
    <div class="row">
        <div class="col-auto">
            <VersionFooter />
        </div>
    </div>
</div>

@inject AssetCaches AC

@inject UIState UI

@code {

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        UI.OnPageIsTransitioningChange += StateHasChanged;
    }

    private void NavigateToHome() => UI.CurrentPageContext = UI.PageContexts?.First(x => x.RelativeLink == "/");
}